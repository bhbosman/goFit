#define DD (233+2)+222+2+2+2
#define multiply( f1, f2 ) ( f1 * f2 )
#define multiply( a1, a2 ) ( a1 * a2 )

#include "fitMappings.idl"


const double D01 = 222+2+2+2+2+2;
const double D02 = 1.3;
const double D03 = .0;
const double D04 = 1.3333e02;
const double D05 = 1.3333e-02;
const double D06 = -1.3333e02;
const double D07 = -1.3333e-02;

const float D011 = 0.0;
const float D022 = 1.3;
const float D033 = .0;
const float D044 = 1.3333e02;
const float D055 = 1.3333e-02;
const float D066 = -1.3333e02;
const float D077 = -1.3333e-02;





const FitInt64z HexNumber = 0xFF;
const string StringNumber = "dddd";
const wstring WideStringNumber = "dddd";


enum NewEnum {a,b,c,e};
const FitInt64z a = ~12;
const int32 b = 12+3;
const int32 c = 12/2;
const int32 d = 12+4*5;
const int32 e = 12-4*5;
struct AA
{
    short Short01;
     short Short02;
    unsigned short Short03;
    unsigned short Short04;
    int32 a;
    int16 b;
    int64 c;
    uint32 d;
    uint16 e;
    uint64 f;
    long g;
    float h;
    double i;
    long long j;
    unsigned long long k;
    sequence<int32> l;
    sequence<int32,3> m;
    short o;
    unsigned short p;
    FitInt64z zz;
    FitInt64zArray zz02;
    NewEnum NewEnum;
    string String01;
    wstring String02;
};

enum Normal
{
    a,b,c,d,e,f
};



struct BB
{
    short Short01;
     short Short02;
    unsigned short Short03;
    unsigned short Short04;
    int32 a;
    int16 b;
    int64 c;
};




enum Abnormal
{
    a=1,b=2,c=3,d=4,e=5,f=6
};



typedef int32 dddd01, dddd02;


typedef struct Proxy
{
    int32 A;
} ProxyA,ProxyB;



