#include "fitTypeDecls.idl"
#include "fitAllTypes.idl"

struct<"Lap", ""> Lap {
	MessageIndex<"Enum", 254, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @MessageIndex;
	uint32<"Uint32", 253, -1, "", 1, 1, "s", "", "", "", "", "Lap end time.", "", "1"> @Timestamp;
	Event<"Enum", 0, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @Event;
	EventType<"Enum", 1, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @EventType;
	uint32<"Uint32", 2, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @StartTime;
	int32<"Sint32", 3, -1, "", 1, 1, "semicircles", "", "", "", "", "", "", "1"> @StartPositionLat;
	int32<"Sint32", 4, -1, "", 1, 1, "semicircles", "", "", "", "", "", "", "1"> @StartPositionLong;
	int32<"Sint32", 5, -1, "", 1, 1, "semicircles", "", "", "", "", "", "", "1"> @EndPositionLat;
	int32<"Sint32", 6, -1, "", 1, 1, "semicircles", "", "", "", "", "", "", "1"> @EndPositionLong;
	uint32<"Uint32", 7, -1, "", 1000, 1, "s", "", "", "", "", "Time (includes pauses)", "", "1"> @TotalElapsedTime;
	uint32<"Uint32", 8, -1, "", 1000, 1, "s", "", "", "", "", "Timer Time (excludes pauses)", "", "1"> @TotalTimerTime;
	uint32<"Uint32", 9, -1, "", 100, 1, "m", "", "", "", "", "", "", "1"> @TotalDistance;
	uint32<"Uint32", 10, -1, "", 1, 1, "cycles", "", "", "", "", "", "", "1"> @TotalCycles
	{
		uint32<"Uint32", "", 1, 1, "strides", "", "", "sport,sport", "running,walking", "", "", "1"> @TotalStrides;
		uint32<"Uint32", "", 1, 1, "strokes", "", "", "sport,sport,sport,sport", "cycling,swimming,rowing,stand_up_paddleboarding", "", "", "1"> @TotalStrokes;
	};
	uint16<"Uint16", 11, -1, "", 1, 1, "kcal", "", "", "", "", "", "", "1"> @TotalCalories;
	uint16<"Uint16", 12, -1, "", 1, 1, "kcal", "", "", "", "", "If New Leaf", "", "1"> @TotalFatCalories;
	uint16<"Uint16", 13, -1, "enhanced_avg_speed", 1000, 1, "m/s", "16", "", "", "", "", "", "1"> @AvgSpeed;
	uint16<"Uint16", 14, -1, "enhanced_max_speed", 1000, 1, "m/s", "16", "", "", "", "", "", "1"> @MaxSpeed;
	uint8<"Uint8", 15, -1, "", 1, 1, "bpm", "", "", "", "", "", "", "1"> @AvgHeartRate;
	uint8<"Uint8", 16, -1, "", 1, 1, "bpm", "", "", "", "", "", "", "1"> @MaxHeartRate;
	uint8<"Uint8", 17, -1, "", 1, 1, "rpm", "", "", "", "", "total_cycles / total_timer_time if non_zero_avg_cadence otherwise total_cycles / total_elapsed_time", "", "1"> @AvgCadence
	{
		uint8<"Uint8", "", 1, 1, "strides/min", "", "", "sport", "running", "", "", "1"> @AvgRunningCadence;
	};
	uint8<"Uint8", 18, -1, "", 1, 1, "rpm", "", "", "", "", "", "", "1"> @MaxCadence
	{
		uint8<"Uint8", "", 1, 1, "strides/min", "", "", "sport", "running", "", "", "1"> @MaxRunningCadence;
	};
	uint16<"Uint16", 19, -1, "", 1, 1, "watts", "", "", "", "", "total_power / total_timer_time if non_zero_avg_power otherwise total_power / total_elapsed_time", "", "1"> @AvgPower;
	uint16<"Uint16", 20, -1, "", 1, 1, "watts", "", "", "", "", "", "", "1"> @MaxPower;
	uint16<"Uint16", 21, -1, "", 1, 1, "m", "", "", "", "", "", "", "1"> @TotalAscent;
	uint16<"Uint16", 22, -1, "", 1, 1, "m", "", "", "", "", "", "", "1"> @TotalDescent;
	Intensity<"Enum", 23, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @Intensity;
	LapTrigger<"Enum", 24, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @LapTrigger;
	Sport<"Enum", 25, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @Sport;
	uint8<"Uint8", 26, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @EventGroup;
	uint16<"Uint16", 32, -1, "", 1, 1, "lengths", "", "", "", "", "# of lengths of swim pool", "", "1"> @NumLengths;
	uint16<"Uint16", 33, -1, "", 1, 1, "watts", "", "", "", "", "", "", "1"> @NormalizedPower;
	LeftRightBalance100<"Enum", 34, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @LeftRightBalance;
	uint16<"Uint16", 35, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @FirstLengthIndex;
	uint16<"Uint16", 37, -1, "", 100, 1, "m", "", "", "", "", "", "", "1"> @AvgStrokeDistance;
	SwimStroke<"Enum", 38, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @SwimStroke;
	SubSport<"Enum", 39, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @SubSport;
	uint16<"Uint16", 40, -1, "", 1, 1, "lengths", "", "", "", "", "# of active lengths of swim pool", "", "1"> @NumActiveLengths;
	uint32<"Uint32", 41, -1, "", 1, 1, "J", "", "", "", "", "", "", "1"> @TotalWork;
	uint16<"Uint16", 42, -1, "enhanced_avg_altitude", 5, 500, "m", "16", "", "", "", "", "", "1"> @AvgAltitude;
	uint16<"Uint16", 43, -1, "enhanced_max_altitude", 5, 500, "m", "16", "", "", "", "", "", "1"> @MaxAltitude;
	uint8<"Uint8", 44, -1, "", 1, 1, "m", "", "", "", "", "", "", "1"> @GpsAccuracy;
	int16<"Sint16", 45, -1, "", 100, 1, "%", "", "", "", "", "", "", "1"> @AvgGrade;
	int16<"Sint16", 46, -1, "", 100, 1, "%", "", "", "", "", "", "", "1"> @AvgPosGrade;
	int16<"Sint16", 47, -1, "", 100, 1, "%", "", "", "", "", "", "", "1"> @AvgNegGrade;
	int16<"Sint16", 48, -1, "", 100, 1, "%", "", "", "", "", "", "", "1"> @MaxPosGrade;
	int16<"Sint16", 49, -1, "", 100, 1, "%", "", "", "", "", "", "", "1"> @MaxNegGrade;
	int8<"Sint8", 50, -1, "", 1, 1, "C", "", "", "", "", "", "", "1"> @AvgTemperature;
	int8<"Sint8", 51, -1, "", 1, 1, "C", "", "", "", "", "", "", "1"> @MaxTemperature;
	uint32<"Uint32", 52, -1, "", 1000, 1, "s", "", "", "", "", "", "", "1"> @TotalMovingTime;
	int16<"Sint16", 53, -1, "", 1000, 1, "m/s", "", "", "", "", "", "", "1"> @AvgPosVerticalSpeed;
	int16<"Sint16", 54, -1, "", 1000, 1, "m/s", "", "", "", "", "", "", "1"> @AvgNegVerticalSpeed;
	int16<"Sint16", 55, -1, "", 1000, 1, "m/s", "", "", "", "", "", "", "1"> @MaxPosVerticalSpeed;
	int16<"Sint16", 56, -1, "", 1000, 1, "m/s", "", "", "", "", "", "", "1"> @MaxNegVerticalSpeed;
	uint32<"Uint32", 57, 0, "", 1000, 1, "s", "", "", "", "", "", "", "1"> @TimeInHrZone;
	uint32<"Uint32", 58, 0, "", 1000, 1, "s", "", "", "", "", "", "", "1"> @TimeInSpeedZone;
	uint32<"Uint32", 59, 0, "", 1000, 1, "s", "", "", "", "", "", "", "1"> @TimeInCadenceZone;
	uint32<"Uint32", 60, 0, "", 1000, 1, "s", "", "", "", "", "", "", "1"> @TimeInPowerZone;
	uint16<"Uint16", 61, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @RepetitionNum;
	uint16<"Uint16", 62, -1, "enhanced_min_altitude", 5, 500, "m", "16", "", "", "", "", "", "1"> @MinAltitude;
	uint8<"Uint8", 63, -1, "", 1, 1, "bpm", "", "", "", "", "", "", "1"> @MinHeartRate;
	MessageIndex<"Enum", 71, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @WktStepIndex;
	uint16<"Uint16", 74, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @OpponentScore;
	uint16<"Uint16", 75, 0, "", 1, 1, "counts", "", "", "", "", "stroke_type enum used as the index", "", "1"> @StrokeCount;
	uint16<"Uint16", 76, 0, "", 1, 1, "counts", "", "", "", "", "zone number used as the index", "", "1"> @ZoneCount;
	uint16<"Uint16", 77, -1, "", 10, 1, "mm", "", "", "", "", "", "", "1"> @AvgVerticalOscillation;
	uint16<"Uint16", 78, -1, "", 100, 1, "percent", "", "", "", "", "", "", "1"> @AvgStanceTimePercent;
	uint16<"Uint16", 79, -1, "", 10, 1, "ms", "", "", "", "", "", "", "1"> @AvgStanceTime;
	uint8<"Uint8", 80, -1, "", 128, 1, "rpm", "", "", "", "", "fractional part of the avg_cadence", "", "1"> @AvgFractionalCadence;
	uint8<"Uint8", 81, -1, "", 128, 1, "rpm", "", "", "", "", "fractional part of the max_cadence", "", "1"> @MaxFractionalCadence;
	uint8<"Uint8", 82, -1, "", 128, 1, "cycles", "", "", "", "", "fractional part of the total_cycles", "", "1"> @TotalFractionalCycles;
	uint16<"Uint16", 83, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @PlayerScore;
	uint16<"Uint16", 84, 0, "", 100, 1, "g/dL", "", "", "", "", "Avg saturated and unsaturated hemoglobin", "", "1"> @AvgTotalHemoglobinConc;
	uint16<"Uint16", 85, 0, "", 100, 1, "g/dL", "", "", "", "", "Min saturated and unsaturated hemoglobin", "", "1"> @MinTotalHemoglobinConc;
	uint16<"Uint16", 86, 0, "", 100, 1, "g/dL", "", "", "", "", "Max saturated and unsaturated hemoglobin", "", "1"> @MaxTotalHemoglobinConc;
	uint16<"Uint16", 87, 0, "", 10, 1, "%", "", "", "", "", "Avg percentage of hemoglobin saturated with oxygen", "", "1"> @AvgSaturatedHemoglobinPercent;
	uint16<"Uint16", 88, 0, "", 10, 1, "%", "", "", "", "", "Min percentage of hemoglobin saturated with oxygen", "", "1"> @MinSaturatedHemoglobinPercent;
	uint16<"Uint16", 89, 0, "", 10, 1, "%", "", "", "", "", "Max percentage of hemoglobin saturated with oxygen", "", "1"> @MaxSaturatedHemoglobinPercent;
	uint8<"Uint8", 91, -1, "", 2, 1, "percent", "", "", "", "", "", "", ""> @AvgLeftTorqueEffectiveness;
	uint8<"Uint8", 92, -1, "", 2, 1, "percent", "", "", "", "", "", "", ""> @AvgRightTorqueEffectiveness;
	uint8<"Uint8", 93, -1, "", 2, 1, "percent", "", "", "", "", "", "", ""> @AvgLeftPedalSmoothness;
	uint8<"Uint8", 94, -1, "", 2, 1, "percent", "", "", "", "", "", "", ""> @AvgRightPedalSmoothness;
	uint8<"Uint8", 95, -1, "", 2, 1, "percent", "", "", "", "", "", "", ""> @AvgCombinedPedalSmoothness;
	uint32<"Uint32", 98, -1, "", 1000, 1, "s", "", "", "", "", "Total time spent in the standing position", "", ""> @TimeStanding;
	uint16<"Uint16", 99, -1, "", 1, 1, "", "", "", "", "", "Number of transitions to the standing state", "", ""> @StandCount;
	int8<"Sint8", 100, -1, "", 1, 1, "mm", "", "", "", "", "Average left platform center offset", "", ""> @AvgLeftPco;
	int8<"Sint8", 101, -1, "", 1, 1, "mm", "", "", "", "", "Average right platform center offset", "", ""> @AvgRightPco;
	uint8<"Uint8", 102, 0, "", 0.7111111, 1, "degrees", "", "", "", "", "Average left power phase angles. Data value indexes defined by power_phase_type.", "", ""> @AvgLeftPowerPhase;
	uint8<"Uint8", 103, 0, "", 0.7111111, 1, "degrees", "", "", "", "", "Average left power phase peak angles. Data value indexes defined by power_phase_type.", "", ""> @AvgLeftPowerPhasePeak;
	uint8<"Uint8", 104, 0, "", 0.7111111, 1, "degrees", "", "", "", "", "Average right power phase angles. Data value indexes defined by power_phase_type.", "", ""> @AvgRightPowerPhase;
	uint8<"Uint8", 105, 0, "", 0.7111111, 1, "degrees", "", "", "", "", "Average right power phase peak angles. Data value indexes defined by power_phase_type.", "", ""> @AvgRightPowerPhasePeak;
	uint16<"Uint16", 106, 0, "", 1, 1, "watts", "", "", "", "", "Average power by position. Data value indexes defined by rider_position_type.", "", ""> @AvgPowerPosition;
	uint16<"Uint16", 107, 0, "", 1, 1, "watts", "", "", "", "", "Maximum power by position. Data value indexes defined by rider_position_type.", "", ""> @MaxPowerPosition;
	uint8<"Uint8", 108, 0, "", 1, 1, "rpm", "", "", "", "", "Average cadence by position. Data value indexes defined by rider_position_type.", "", ""> @AvgCadencePosition;
	uint8<"Uint8", 109, 0, "", 1, 1, "rpm", "", "", "", "", "Maximum cadence by position. Data value indexes defined by rider_position_type.", "", ""> @MaxCadencePosition;
	uint32<"Uint32", 110, -1, "", 1000, 1, "m/s", "", "", "", "", "", "", "1"> @EnhancedAvgSpeed;
	uint32<"Uint32", 111, -1, "", 1000, 1, "m/s", "", "", "", "", "", "", "1"> @EnhancedMaxSpeed;
	uint32<"Uint32", 112, -1, "", 5, 500, "m", "", "", "", "", "", "", "1"> @EnhancedAvgAltitude;
	uint32<"Uint32", 113, -1, "", 5, 500, "m", "", "", "", "", "", "", "1"> @EnhancedMinAltitude;
	uint32<"Uint32", 114, -1, "", 5, 500, "m", "", "", "", "", "", "", "1"> @EnhancedMaxAltitude;
	uint16<"Uint16", 115, -1, "", 1, 1, "watts", "", "", "", "", "lev average motor power during lap", "", ""> @AvgLevMotorPower;
	uint16<"Uint16", 116, -1, "", 1, 1, "watts", "", "", "", "", "lev maximum motor power during lap", "", ""> @MaxLevMotorPower;
	uint8<"Uint8", 117, -1, "", 2, 1, "percent", "", "", "", "", "lev battery consumption during lap", "", ""> @LevBatteryConsumption;
	uint16<"Uint16", 118, -1, "", 100, 1, "percent", "", "", "", "", "", "", ""> @AvgVerticalRatio;
	uint16<"Uint16", 119, -1, "", 100, 1, "percent", "", "", "", "", "", "", ""> @AvgStanceTimeBalance;
	uint16<"Uint16", 120, -1, "", 10, 1, "mm", "", "", "", "", "", "", ""> @AvgStepLength;
	uint16<"Uint16", 121, -1, "", 1000, 1, "m/s", "16", "", "", "", "", "", "1"> @AvgVam;
	uint32<"Uint32", 122, -1, "", 1000, 1, "m", "", "", "", "", "0 if above water", "", ""> @AvgDepth;
	uint32<"Uint32", 123, -1, "", 1000, 1, "m", "", "", "", "", "0 if above water", "", ""> @MaxDepth;
	int8<"Sint8", 124, -1, "", 1, 1, "C", "", "", "", "", "", "", "1"> @MinTemperature;
	uint16<"Uint16", 136, -1, "", 100, 1, "Breaths/min", "", "", "", "", "", "", ""> @EnhancedAvgRespirationRate;
	uint16<"Uint16", 137, -1, "", 100, 1, "Breaths/min", "", "", "", "", "", "", ""> @EnhancedMaxRespirationRate;
	uint8<"Uint8", 147, -1, "enhanced_avg_respiration_rate", 1, 1, "", "8", "", "", "", "", "", ""> @AvgRespirationRate;
	uint8<"Uint8", 148, -1, "enhanced_max_respiration_rate", 1, 1, "", "8", "", "", "", "", "", ""> @MaxRespirationRate;
	float32<"Float32", 149, -1, "", 1, 1, "kGrit", "", "", "", "", "The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.", "", ""> @TotalGrit;
	float32<"Float32", 150, -1, "", 1, 1, "Flow", "", "", "", "", "The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.", "", ""> @TotalFlow;
	uint16<"Uint16", 151, -1, "", 1, 1, "", "", "", "", "", "", "", ""> @JumpCount;
	float32<"Float32", 153, -1, "", 1, 1, "kGrit", "", "", "", "", "The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.", "", ""> @AvgGrit;
	float32<"Float32", 154, -1, "", 1, 1, "Flow", "", "", "", "", "The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.", "", ""> @AvgFlow;
	uint8<"Uint8", 156, -1, "", 100, 1, "m", "", "", "", "", "fractional part of total_ascent", "", ""> @TotalFractionalAscent;
	uint8<"Uint8", 157, -1, "", 100, 1, "m", "", "", "", "", "fractional part of total_descent", "", ""> @TotalFractionalDescent;
	uint16<"Uint16", 158, -1, "", 100, 1, "C", "", "", "", "", "", "", ""> @AvgCoreTemperature;
	uint16<"Uint16", 159, -1, "", 100, 1, "C", "", "", "", "", "", "", ""> @MinCoreTemperature;
	uint16<"Uint16", 160, -1, "", 100, 1, "C", "", "", "", "", "", "", ""> @MaxCoreTemperature;
};
