#include "fitTypeDecls.idl"
#include "fitAllTypes.idl"

struct<"DiveSettings", ""> DiveSettings {
	uint32<"Uint32", 253, -1, "", 1, 1, "", "", "", "", "", "", "", ""> @Timestamp;
	MessageIndex<"Enum", 254, -1, "", 1, 1, "", "", "", "", "", "", "", ""> @MessageIndex;
	string<"String", 0, -1, "", 1, 1, "", "", "", "", "", "", "", "16"> @Name;
	TissueModelType<"Enum", 1, -1, "", 1, 1, "", "", "", "", "", "", "", ""> @Model;
	uint8<"Uint8", 2, -1, "", 1, 1, "percent", "", "", "", "", "", "", ""> @GfLow;
	uint8<"Uint8", 3, -1, "", 1, 1, "percent", "", "", "", "", "", "", ""> @GfHigh;
	WaterType<"Enum", 4, -1, "", 1, 1, "", "", "", "", "", "", "", ""> @WaterType;
	float32<"Float32", 5, -1, "", 1, 1, "kg/m^3", "", "", "", "", "Fresh water is usually 1000; salt water is usually 1025", "", ""> @WaterDensity;
	uint8<"Uint8", 6, -1, "", 100, 1, "percent", "", "", "", "", "Typically 1.40", "", ""> @Po2Warn;
	uint8<"Uint8", 7, -1, "", 100, 1, "percent", "", "", "", "", "Typically 1.60", "", ""> @Po2Critical;
	uint8<"Uint8", 8, -1, "", 100, 1, "percent", "", "", "", "", "", "", ""> @Po2Deco;
	bool<"Bool", 9, -1, "", 1, 1, "", "", "", "", "", "", "", ""> @SafetyStopEnabled;
	float32<"Float32", 10, -1, "", 1, 1, "", "", "", "", "", "", "", ""> @BottomDepth;
	uint32<"Uint32", 11, -1, "", 1, 1, "", "", "", "", "", "", "", ""> @BottomTime;
	bool<"Bool", 12, -1, "", 1, 1, "", "", "", "", "", "", "", ""> @ApneaCountdownEnabled;
	uint32<"Uint32", 13, -1, "", 1, 1, "", "", "", "", "", "", "", ""> @ApneaCountdownTime;
	DiveBacklightMode<"Enum", 14, -1, "", 1, 1, "", "", "", "", "", "", "", ""> @BacklightMode;
	uint8<"Uint8", 15, -1, "", 1, 1, "", "", "", "", "", "", "", ""> @BacklightBrightness;
	BacklightTimeout<"Enum", 16, -1, "", 1, 1, "", "", "", "", "", "", "", ""> @BacklightTimeout;
	uint16<"Uint16", 17, -1, "", 1, 1, "s", "", "", "", "", "Time between surfacing and ending the activity", "", ""> @RepeatDiveInterval;
	uint16<"Uint16", 18, -1, "", 1, 1, "s", "", "", "", "", "Time at safety stop (if enabled)", "", ""> @SafetyStopTime;
	SourceType<"Enum", 19, -1, "", 1, 1, "", "", "", "", "", "", "", ""> @HeartRateSourceType;
	uint8<"Uint8", 20, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @HeartRateSource
	{
		uint8<"Uint8", "", 1, 1, "", "", "", "heart_rate_source_type", "antplus", "", "", "1"> @HeartRateAntplusDeviceType;
		uint8<"Uint8", "", 1, 1, "", "", "", "heart_rate_source_type", "local", "", "", "1"> @HeartRateLocalDeviceType;
	};
	MessageIndex<"Enum", 21, -1, "", 1, 1, "", "", "", "", "", "Index of travel dive_gas message", "", ""> @TravelGas;
	CcrSetpointSwitchMode<"Enum", 22, -1, "", 1, 1, "", "", "", "", "", "If low PO2 should be switched to automatically", "", ""> @CcrLowSetpointSwitchMode;
	uint8<"Uint8", 23, -1, "", 100, 1, "percent", "", "", "", "", "Target PO2 when using low setpoint", "", ""> @CcrLowSetpoint;
	uint32<"Uint32", 24, -1, "", 1000, 1, "m", "", "", "", "", "Depth to switch to low setpoint in automatic mode", "", ""> @CcrLowSetpointDepth;
	CcrSetpointSwitchMode<"Enum", 25, -1, "", 1, 1, "", "", "", "", "", "If high PO2 should be switched to automatically", "", ""> @CcrHighSetpointSwitchMode;
	uint8<"Uint8", 26, -1, "", 100, 1, "percent", "", "", "", "", "Target PO2 when using high setpoint", "", ""> @CcrHighSetpoint;
	uint32<"Uint32", 27, -1, "", 1000, 1, "m", "", "", "", "", "Depth to switch to high setpoint in automatic mode", "", ""> @CcrHighSetpointDepth;
	GasConsumptionRateType<"Enum", 29, -1, "", 1, 1, "", "", "", "", "", "Type of gas consumption rate to display. Some values are only valid if tank volume is known.", "", ""> @GasConsumptionDisplay;
	bool<"Bool", 30, -1, "", 1, 1, "", "", "", "", "", "Indicates whether the up key is enabled during dives", "", ""> @UpKeyEnabled;
	Tone<"Enum", 35, -1, "", 1, 1, "", "", "", "", "", "Sounds and vibration enabled or disabled in-dive", "", ""> @DiveSounds;
	uint8<"Uint8", 36, -1, "", 10, 1, "", "", "", "", "", "Usually 1.0/1.5/2.0 representing 3/4.5/6m or 10/15/20ft", "", ""> @LastStopMultiple;
	NoFlyTimeMode<"Enum", 37, -1, "", 1, 1, "", "", "", "", "", "Indicates which guidelines to use for no-fly surface interval.", "", ""> @NoFlyTimeMode;
};
