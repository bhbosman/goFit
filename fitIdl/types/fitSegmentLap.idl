#include "fitTypeDecls.idl"
#include "fitAllTypes.idl"

struct<"SegmentLap", ""> SegmentLap {
	MessageIndex<"Enum", 254, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @MessageIndex;
	uint32<"Uint32", 253, -1, "", 1, 1, "s", "", "", "", "", "Lap end time.", "", "1"> @Timestamp;
	Event<"Enum", 0, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @Event;
	EventType<"Enum", 1, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @EventType;
	uint32<"Uint32", 2, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @StartTime;
	int32<"Sint32", 3, -1, "", 1, 1, "semicircles", "", "", "", "", "", "", "1"> @StartPositionLat;
	int32<"Sint32", 4, -1, "", 1, 1, "semicircles", "", "", "", "", "", "", "1"> @StartPositionLong;
	int32<"Sint32", 5, -1, "", 1, 1, "semicircles", "", "", "", "", "", "", "1"> @EndPositionLat;
	int32<"Sint32", 6, -1, "", 1, 1, "semicircles", "", "", "", "", "", "", "1"> @EndPositionLong;
	uint32<"Uint32", 7, -1, "", 1000, 1, "s", "", "", "", "", "Time (includes pauses)", "", "1"> @TotalElapsedTime;
	uint32<"Uint32", 8, -1, "", 1000, 1, "s", "", "", "", "", "Timer Time (excludes pauses)", "", "1"> @TotalTimerTime;
	uint32<"Uint32", 9, -1, "", 100, 1, "m", "", "", "", "", "", "", "1"> @TotalDistance;
	uint32<"Uint32", 10, -1, "", 1, 1, "cycles", "", "", "", "", "", "", "1"> @TotalCycles
	{
		uint32<"Uint32", "", 1, 1, "strokes", "", "", "sport", "cycling", "", "", "1"> @TotalStrokes;
	};
	uint16<"Uint16", 11, -1, "", 1, 1, "kcal", "", "", "", "", "", "", "1"> @TotalCalories;
	uint16<"Uint16", 12, -1, "", 1, 1, "kcal", "", "", "", "", "If New Leaf", "", "1"> @TotalFatCalories;
	uint16<"Uint16", 13, -1, "", 1000, 1, "m/s", "", "", "", "", "", "", "1"> @AvgSpeed;
	uint16<"Uint16", 14, -1, "", 1000, 1, "m/s", "", "", "", "", "", "", "1"> @MaxSpeed;
	uint8<"Uint8", 15, -1, "", 1, 1, "bpm", "", "", "", "", "", "", "1"> @AvgHeartRate;
	uint8<"Uint8", 16, -1, "", 1, 1, "bpm", "", "", "", "", "", "", "1"> @MaxHeartRate;
	uint8<"Uint8", 17, -1, "", 1, 1, "rpm", "", "", "", "", "total_cycles / total_timer_time if non_zero_avg_cadence otherwise total_cycles / total_elapsed_time", "", "1"> @AvgCadence;
	uint8<"Uint8", 18, -1, "", 1, 1, "rpm", "", "", "", "", "", "", "1"> @MaxCadence;
	uint16<"Uint16", 19, -1, "", 1, 1, "watts", "", "", "", "", "total_power / total_timer_time if non_zero_avg_power otherwise total_power / total_elapsed_time", "", "1"> @AvgPower;
	uint16<"Uint16", 20, -1, "", 1, 1, "watts", "", "", "", "", "", "", "1"> @MaxPower;
	uint16<"Uint16", 21, -1, "", 1, 1, "m", "", "", "", "", "", "", "1"> @TotalAscent;
	uint16<"Uint16", 22, -1, "", 1, 1, "m", "", "", "", "", "", "", "1"> @TotalDescent;
	Sport<"Enum", 23, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @Sport;
	uint8<"Uint8", 24, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @EventGroup;
	int32<"Sint32", 25, -1, "", 1, 1, "semicircles", "", "", "", "", "North east corner latitude.", "", "1"> @NecLat;
	int32<"Sint32", 26, -1, "", 1, 1, "semicircles", "", "", "", "", "North east corner longitude.", "", "1"> @NecLong;
	int32<"Sint32", 27, -1, "", 1, 1, "semicircles", "", "", "", "", "South west corner latitude.", "", "1"> @SwcLat;
	int32<"Sint32", 28, -1, "", 1, 1, "semicircles", "", "", "", "", "South west corner latitude.", "", "1"> @SwcLong;
	string<"String", 29, -1, "", 1, 1, "", "", "", "", "", "", "", "16"> @Name;
	uint16<"Uint16", 30, -1, "", 1, 1, "watts", "", "", "", "", "", "", "1"> @NormalizedPower;
	LeftRightBalance100<"Enum", 31, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @LeftRightBalance;
	SubSport<"Enum", 32, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @SubSport;
	uint32<"Uint32", 33, -1, "", 1, 1, "J", "", "", "", "", "", "", "1"> @TotalWork;
	uint16<"Uint16", 34, -1, "enhanced_avg_altitude", 5, 500, "m", "16", "", "", "", "", "", "1"> @AvgAltitude;
	uint16<"Uint16", 35, -1, "enhanced_max_altitude", 5, 500, "m", "16", "", "", "", "", "", "1"> @MaxAltitude;
	uint8<"Uint8", 36, -1, "", 1, 1, "m", "", "", "", "", "", "", "1"> @GpsAccuracy;
	int16<"Sint16", 37, -1, "", 100, 1, "%", "", "", "", "", "", "", "1"> @AvgGrade;
	int16<"Sint16", 38, -1, "", 100, 1, "%", "", "", "", "", "", "", "1"> @AvgPosGrade;
	int16<"Sint16", 39, -1, "", 100, 1, "%", "", "", "", "", "", "", "1"> @AvgNegGrade;
	int16<"Sint16", 40, -1, "", 100, 1, "%", "", "", "", "", "", "", "1"> @MaxPosGrade;
	int16<"Sint16", 41, -1, "", 100, 1, "%", "", "", "", "", "", "", "1"> @MaxNegGrade;
	int8<"Sint8", 42, -1, "", 1, 1, "C", "", "", "", "", "", "", "1"> @AvgTemperature;
	int8<"Sint8", 43, -1, "", 1, 1, "C", "", "", "", "", "", "", "1"> @MaxTemperature;
	uint32<"Uint32", 44, -1, "", 1000, 1, "s", "", "", "", "", "", "", "1"> @TotalMovingTime;
	int16<"Sint16", 45, -1, "", 1000, 1, "m/s", "", "", "", "", "", "", "1"> @AvgPosVerticalSpeed;
	int16<"Sint16", 46, -1, "", 1000, 1, "m/s", "", "", "", "", "", "", "1"> @AvgNegVerticalSpeed;
	int16<"Sint16", 47, -1, "", 1000, 1, "m/s", "", "", "", "", "", "", "1"> @MaxPosVerticalSpeed;
	int16<"Sint16", 48, -1, "", 1000, 1, "m/s", "", "", "", "", "", "", "1"> @MaxNegVerticalSpeed;
	uint32<"Uint32", 49, 0, "", 1000, 1, "s", "", "", "", "", "", "", "1"> @TimeInHrZone;
	uint32<"Uint32", 50, 0, "", 1000, 1, "s", "", "", "", "", "", "", "1"> @TimeInSpeedZone;
	uint32<"Uint32", 51, 0, "", 1000, 1, "s", "", "", "", "", "", "", "1"> @TimeInCadenceZone;
	uint32<"Uint32", 52, 0, "", 1000, 1, "s", "", "", "", "", "", "", "1"> @TimeInPowerZone;
	uint16<"Uint16", 53, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @RepetitionNum;
	uint16<"Uint16", 54, -1, "enhanced_min_altitude", 5, 500, "m", "16", "", "", "", "", "", "1"> @MinAltitude;
	uint8<"Uint8", 55, -1, "", 1, 1, "bpm", "", "", "", "", "", "", "1"> @MinHeartRate;
	uint32<"Uint32", 56, -1, "", 1000, 1, "s", "", "", "", "", "", "", "1"> @ActiveTime;
	MessageIndex<"Enum", 57, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @WktStepIndex;
	SportEvent<"Enum", 58, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @SportEvent;
	uint8<"Uint8", 59, -1, "", 2, 1, "percent", "", "", "", "", "", "", "1"> @AvgLeftTorqueEffectiveness;
	uint8<"Uint8", 60, -1, "", 2, 1, "percent", "", "", "", "", "", "", "1"> @AvgRightTorqueEffectiveness;
	uint8<"Uint8", 61, -1, "", 2, 1, "percent", "", "", "", "", "", "", "1"> @AvgLeftPedalSmoothness;
	uint8<"Uint8", 62, -1, "", 2, 1, "percent", "", "", "", "", "", "", "1"> @AvgRightPedalSmoothness;
	uint8<"Uint8", 63, -1, "", 2, 1, "percent", "", "", "", "", "", "", "1"> @AvgCombinedPedalSmoothness;
	SegmentLapStatus<"Enum", 64, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @Status;
	string<"String", 65, -1, "", 1, 1, "", "", "", "", "", "", "", "33"> @Uuid;
	uint8<"Uint8", 66, -1, "", 128, 1, "rpm", "", "", "", "", "fractional part of the avg_cadence", "", "1"> @AvgFractionalCadence;
	uint8<"Uint8", 67, -1, "", 128, 1, "rpm", "", "", "", "", "fractional part of the max_cadence", "", "1"> @MaxFractionalCadence;
	uint8<"Uint8", 68, -1, "", 128, 1, "cycles", "", "", "", "", "fractional part of the total_cycles", "", "1"> @TotalFractionalCycles;
	uint16<"Uint16", 69, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @FrontGearShiftCount;
	uint16<"Uint16", 70, -1, "", 1, 1, "", "", "", "", "", "", "", "1"> @RearGearShiftCount;
	uint32<"Uint32", 71, -1, "", 1000, 1, "s", "", "", "", "", "Total time spent in the standing position", "", ""> @TimeStanding;
	uint16<"Uint16", 72, -1, "", 1, 1, "", "", "", "", "", "Number of transitions to the standing state", "", ""> @StandCount;
	int8<"Sint8", 73, -1, "", 1, 1, "mm", "", "", "", "", "Average left platform center offset", "", ""> @AvgLeftPco;
	int8<"Sint8", 74, -1, "", 1, 1, "mm", "", "", "", "", "Average right platform center offset", "", ""> @AvgRightPco;
	uint8<"Uint8", 75, 0, "", 0.7111111, 1, "degrees", "", "", "", "", "Average left power phase angles. Data value indexes defined by power_phase_type.", "", ""> @AvgLeftPowerPhase;
	uint8<"Uint8", 76, 0, "", 0.7111111, 1, "degrees", "", "", "", "", "Average left power phase peak angles. Data value indexes defined by power_phase_type.", "", ""> @AvgLeftPowerPhasePeak;
	uint8<"Uint8", 77, 0, "", 0.7111111, 1, "degrees", "", "", "", "", "Average right power phase angles. Data value indexes defined by power_phase_type.", "", ""> @AvgRightPowerPhase;
	uint8<"Uint8", 78, 0, "", 0.7111111, 1, "degrees", "", "", "", "", "Average right power phase peak angles. Data value indexes defined by power_phase_type.", "", ""> @AvgRightPowerPhasePeak;
	uint16<"Uint16", 79, 0, "", 1, 1, "watts", "", "", "", "", "Average power by position. Data value indexes defined by rider_position_type.", "", ""> @AvgPowerPosition;
	uint16<"Uint16", 80, 0, "", 1, 1, "watts", "", "", "", "", "Maximum power by position. Data value indexes defined by rider_position_type.", "", ""> @MaxPowerPosition;
	uint8<"Uint8", 81, 0, "", 1, 1, "rpm", "", "", "", "", "Average cadence by position. Data value indexes defined by rider_position_type.", "", ""> @AvgCadencePosition;
	uint8<"Uint8", 82, 0, "", 1, 1, "rpm", "", "", "", "", "Maximum cadence by position. Data value indexes defined by rider_position_type.", "", ""> @MaxCadencePosition;
	Manufacturer<"Enum", 83, -1, "", 1, 1, "", "", "", "", "", "Manufacturer that produced the segment", "", ""> @Manufacturer;
	float32<"Float32", 84, -1, "", 1, 1, "kGrit", "", "", "", "", "The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.", "", ""> @TotalGrit;
	float32<"Float32", 85, -1, "", 1, 1, "Flow", "", "", "", "", "The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.", "", ""> @TotalFlow;
	float32<"Float32", 86, -1, "", 1, 1, "kGrit", "", "", "", "", "The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.", "", ""> @AvgGrit;
	float32<"Float32", 87, -1, "", 1, 1, "Flow", "", "", "", "", "The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.", "", ""> @AvgFlow;
	uint8<"Uint8", 89, -1, "", 100, 1, "m", "", "", "", "", "fractional part of total_ascent", "", ""> @TotalFractionalAscent;
	uint8<"Uint8", 90, -1, "", 100, 1, "m", "", "", "", "", "fractional part of total_descent", "", ""> @TotalFractionalDescent;
	uint32<"Uint32", 91, -1, "", 5, 500, "m", "", "", "", "", "", "", ""> @EnhancedAvgAltitude;
	uint32<"Uint32", 92, -1, "", 5, 500, "m", "", "", "", "", "", "", ""> @EnhancedMaxAltitude;
	uint32<"Uint32", 93, -1, "", 5, 500, "m", "", "", "", "", "", "", ""> @EnhancedMinAltitude;
};
