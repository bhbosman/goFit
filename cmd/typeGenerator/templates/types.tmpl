// Code generated by. DO NOT EDIT.
package types

import __strconv__ "strconv"

{{ $constantDecl := . -}}
// {{.Name}}: {{if ne .Comment ""}}{{.Comment}}{{end}}
type {{.Name}} {{.Type}}

const (
{{range .ConstantValue }}
    {{- if or (or (or (eq $constantDecl.Type "enum") (eq $constantDecl.Type "byte")) (eq $constantDecl.Type "uint8")) (eq $constantDecl.Type "uint8z") -}}
        {{$constantDecl.Name -}}{{.Name}} {{$constantDecl.Name}} = 0x{{printf "%02X" .Value}} // ByteValue: {{.Value}} {{.Comment -}}
    {{- else if or (eq $constantDecl.Type "uint16") (eq $constantDecl.Type "uint16z") -}}
        {{$constantDecl.Name}}{{.Name}} {{$constantDecl.Name}} = 0x{{printf "%04X" .Value}} // Int16 Value: {{.Value}} {{.Comment -}}
    {{- else -}}
        {{$constantDecl.Name}}{{.Name}} {{$constantDecl.Name}} = 0x{{printf "%08X" .Value}} // Int32 Value: {{.Value}} {{.Comment -}}
    {{end }}
{{end -}}
{{- if or (or (or (eq $constantDecl.Type "enum") (eq $constantDecl.Type "byte")) (eq $constantDecl.Type "uint8")) (eq $constantDecl.Type "uint8z") -}}
    {{$constantDecl.Name}}Invalid {{$constantDecl.Name}} = 0x{{printf "%02X" .Type.InvalidValue}} // Invalid Value
{{- else if or (eq $constantDecl.Type "uint16") (eq $constantDecl.Type "uint16z") -}}
    {{$constantDecl.Name}}Invalid {{$constantDecl.Name}} = 0x{{printf "%04X" .Type.InvalidValue}} // Invalid Value
{{- else -}}
    {{$constantDecl.Name}}Invalid {{$constantDecl.Name}} = 0x{{printf "%08X" .Type.InvalidValue}} // Invalid Value
{{end }}
)

func (t {{.Name}}) {{ exportFunctionName .Type}}() {{.Type}} {
    return {{.Type}}(t)
}

func (t {{.Name}}) String() string {
    switch t {
        {{range .ConstantValue -}}
			case {{$constantDecl.Name}}{{.Name}}:
			    return "{{- .Name.Original -}}"
		{{end -}}
		default:
		    return "{{.Name}}(" + __strconv__.Itoa(int(t)) + ")"
    }
}

func {{$constantDecl.Name}}FromString(s string) {{$constantDecl.Name}} {
    switch s {
        {{range .ConstantValue -}}
			case "{{.Name.Original}}":
			    return {{$constantDecl.Name}}{{.Name}}
		{{end -}}
		default:
		    return {{$constantDecl.Name}}Invalid
    }
}
